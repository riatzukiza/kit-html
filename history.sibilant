(meta (assign sibilant.dir "/home/aaron/devel/tower/libs/kits/kit-html/tests/") null)(add-to-module-lookup"/home/aaron/devel/tower/libs/kits/kit-html/tests/")
(include "../index")
(import-namespace kit)
(include "../inc/macros")
(import-namespace markup)
(require! 'fs)
(def render-test-document (res)
  (with-markup-to-stream res
    (.html
     (.body (.h1 "this is a website!")
            (.div  .id "main-container"
                   .class "container"
                   (.div "yes, yes it is.")

                   (.div (Date.now))

                   (.div "and that was the time."))))))
(render-test-document (.create-write-stream fs 'test.html))
(meta (assign sibilant.dir  "./") null)
(render-test-document (.create-write-stream fs 'test.html))
(shell)
(include "kit/inc/shell")
(import-namespace shell)
(shell (npm run compile) (git add ".") (git commit ["-m" "'moved index.sibilant, compiled'"]) (git push github master))
(.cwd process)
(shell (npm run compile) (git add ".") (git commit ["-m" "'moved index.sibilant, compiled'"]) (git push github master))
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(include "kit/header"
         "kit-interface/header")
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(import-namespace kit)
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(import-namespace interface)
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(import-namespace dom)
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir  "./") null)
(include "kit-html/src/dom")
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(include "kit/header"
         "kit-interface/header")
(import-namespace kit)
(import-namespace interface)
(include "kit-html/src/dom")
(import-namespace dom)
(require! dl 'deeplearn)
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(include "kit-html/src/dom")
(meta (assign sibilant.dir  "./") null)
(include "kit-html/src/dom")
(include "kit-html/header")
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(include "kit/header"
         "kit-interface/header")
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(import-namespace kit)
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(import-namespace interface)
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(include "kit-html/header")
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(include "kit-html/src/dom")
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/kit-lang/libs/html/src/") null)
(add-to-module-lookup"/home/aaron/devel/kit-lang/libs/html/src/")
(namespace dom)
(include "../inc/xml")
(macro dom (root) `(xml create-document-node @root))
(macro with-dom (parent root)
       `(pipe (dom @root)
              (.render @parent)))
(macro instance-of? (item type)
       ["("  type " " 'instanceof " "item ")"])
(def-curried render-children ( *parent c i a)
  (if (undefined? c) null

      c.render (.render c *parent)

      (array? c) (.each c (render-children *parent))

      (string? c) (.append-child *parent.*node (.create-text-node document c))

      (number? c) (.append-child *parent.*node (.create-text-node document (+ "" c)))

      (function? c) (render-children *parent (c *parent) i a)

      (instance-of? Element c) (let ((node (.wrap Document-node c *parent.*node)))
                                 (set a i node)
                                 (render-children *parent  node i a))

      (.append-child *parent.*node c)))
(define Document-node Event-emitter
  (init (tag-name
         attributes
         (*children [])
         *parent

         (*node (document.create-element tag-name)))
        (.call Event-emitter.init this))


  (gett children this.*children)
  (gett style this.*node.style)

  (def-generic clear (*node)
    (assign *node.innerHTML "") this)

  (def-generic render (*parent attributes tag-name *node children)

    
    (assign *node.innerHTML "")
    
    (assign this.*parent *parent)

    (.append-child *parent.*node *node)

    (each attributes (a k) (set *node k a))

    (pipe children (.each  (render-children this)))
    (.emit this 'render )

    this)

  (def wrap (*node *parent)
    "create a Document-node from a native DOM Element"
    ((create Document-node) *node.tag-name {} [] *parent *node))

  (def-generic append (node children)
    "add a child to the bottom of this one"
    (.push children node)
    this)

  (def-generic prepend (node children)
    "add a child to the top of this one"
    (assign this.children [node children]))

  (def-generic remove (*node *parent)
    "remove this element from the tree."

    (.remove *node)

    (.filter *parent.children (=> (c) (not (= *node c))))
    (.emit *parent 'remove *node)
    this))
(define Document-root  Document-node
  (gett *parent this)
  (tag-name "html")
  (*node document.document-element)
  (*children []))
(define Document-body  Document-node
  (gett *parent this)
  (tag-name "body")
  (*node document.body)
  (*children []))
(define Document-head  Document-node
  (gett *parent this)
  (tag-name "head")
  (*node document.head)
  (*children [])
  )
(var create-document-node (create Document-node))
(print document.append-child)
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/kit-lang/libs/html/src/") null)
(add-to-module-lookup"/home/aaron/devel/kit-lang/libs/html/src/")
(include "kit-events/header")
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/kit-lang/libs/html/src/") null)
(add-to-module-lookup"/home/aaron/devel/kit-lang/libs/html/src/")
(define Document-node Event-emitter
  (init (tag-name
         attributes
         (*children [])
         *parent

         (*node (document.create-element tag-name)))
        (.call Event-emitter.init this))


  (gett children this.*children)
  (gett style this.*node.style)

  (def-generic clear (*node)
    (assign *node.innerHTML "") this)

  (def-generic render (*parent attributes tag-name *node children)

    
    (assign *node.innerHTML "")
    
    (assign this.*parent *parent)

    (.append-child *parent.*node *node)

    (each attributes (a k) (set *node k a))

    (pipe children (.each  (render-children this)))
    (.emit this 'render )

    this)

  (def wrap (*node *parent)
    "create a Document-node from a native DOM Element"
    ((create Document-node) *node.tag-name {} [] *parent *node))

  (def-generic append (node children)
    "add a child to the bottom of this one"
    (.push children node)
    this)

  (def-generic prepend (node children)
    "add a child to the top of this one"
    (assign this.children [node children]))

  (def-generic remove (*node *parent)
    "remove this element from the tree."

    (.remove *node)

    (.filter *parent.children (=> (c) (not (= *node c))))
    (.emit *parent 'remove *node)
    this))
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/kit-lang/libs/html/src/") null)
(add-to-module-lookup"/home/aaron/devel/kit-lang/libs/html/src/")
(define Document-root  Document-node
  (gett *parent this)
  (tag-name "html")
  (*node document.document-element)
  (*children []))
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/kit-lang/libs/html/src/") null)
(add-to-module-lookup"/home/aaron/devel/kit-lang/libs/html/src/")
(define Document-body  Document-node
  (gett *parent this)
  (tag-name "body")
  (*node document.body)
  (*children []))
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/kit-lang/libs/html/src/") null)
(add-to-module-lookup"/home/aaron/devel/kit-lang/libs/html/src/")
(define Document-head  Document-node
  (gett *parent this)
  (tag-name "head")
  (*node document.head)
  (*children [])
  )
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/kit-lang/libs/html/src/") null)
(add-to-module-lookup"/home/aaron/devel/kit-lang/libs/html/src/")
(var create-document-node (create Document-node))
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/kit-lang/libs/html/src/") null)
(add-to-module-lookup"/home/aaron/devel/kit-lang/libs/html/src/")
(print document.append-child)
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/kit-lang/libs/html/src/") null)
(add-to-module-lookup"/home/aaron/devel/kit-lang/libs/html/src/")
(include "../inc/xml")
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/kit-lang/libs/html/src/") null)
(add-to-module-lookup"/home/aaron/devel/kit-lang/libs/html/src/")
(macro dom (root) `(xml create-document-node @root))
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/kit-lang/libs/html/src/") null)
(add-to-module-lookup"/home/aaron/devel/kit-lang/libs/html/src/")
(macro with-dom (parent root)
       `(pipe (dom @root)
              (.render @parent)))
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(with-dom Document-body
          (.div .id "main"
                (.h1 "hi")))
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(include "../inc/misc.sibilant")
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(include "kit-html/src/dom")
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/kit-lang/libs/html/src/") null)
(add-to-module-lookup"/home/aaron/devel/kit-lang/libs/html/src/")
(namespace dom)
(include "../inc/xml")
(include "kit-events/header")
(macro dom (root) `(xml create-document-node @root))
(macro with-dom (parent root)
       `(pipe (dom @root)
              (.render @parent)))
(macro instance-of? (item type)
       ["("  type " " 'instanceof " "item ")"])
(def-curried render-children ( *parent c i a)
  (if (undefined? c) null

      c.render (.render c *parent)

      (array? c) (.each c (render-children *parent))

      (string? c) (.append-child *parent.*node (.create-text-node document c))

      (number? c) (.append-child *parent.*node (.create-text-node document (+ "" c)))

      (function? c) (render-children *parent (c *parent) i a)

      (instance-of? Element c) (let ((node (.wrap Document-node c *parent.*node)))
                                 (set a i node)
                                 (render-children *parent  node i a))

      (.append-child *parent.*node c)))
(define Document-node Event-emitter
  (init (tag-name
         attributes
         (*children [])
         *parent

         (*node (document.create-element tag-name)))
        (.call Event-emitter.init this))


  (gett children this.*children)
  (gett style this.*node.style)

  (def-generic clear (*node)
    (assign *node.innerHTML "") this)

  (def-generic render (*parent attributes tag-name *node children)

    
    (assign *node.innerHTML "")
    
    (assign this.*parent *parent)

    (.append-child *parent.*node *node)

    (each attributes (a k) (set *node k a))

    (pipe children (.each  (render-children this)))
    (.emit this 'render )

    this)

  (def wrap (*node *parent)
    "create a Document-node from a native DOM Element"
    ((create Document-node) *node.tag-name {} [] *parent *node))

  (def-generic append (node children)
    "add a child to the bottom of this one"
    (.push children node)
    this)

  (def-generic prepend (node children)
    "add a child to the top of this one"
    (assign this.children [node children]))

  (def-generic remove (*node *parent)
    "remove this element from the tree."

    (.remove *node)

    (.filter *parent.children (=> (c) (not (= *node c))))
    (.emit *parent 'remove *node)
    this))
(define Document-root  Document-node
  (gett *parent this)
  (tag-name "html")
  (*node document.document-element)
  (*children []))
(define Document-body  Document-node
  (gett *parent this)
  (tag-name "body")
  (*node document.body)
  (*children []))
(define Document-head  Document-node
  (gett *parent this)
  (tag-name "head")
  (*node document.head)
  (*children [])
  )
(var create-document-node (create Document-node))
(print document.append-child)
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(with-dom Document-body
          (.div .id "main"
                (.h1 "hi")))
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/kit-lang/libs/html/src/") null)
(add-to-module-lookup"/home/aaron/devel/kit-lang/libs/html/src/")
(namespace dom)
(include "../inc/xml")
(include "kit-events/header")
(macro dom (root) `(xml create-document-node @root))
(macro with-dom (parent root)
       `(pipe (dom @root)
              (.render @parent)))
(macro instance-of? (item type)
       ["("  type " " 'instanceof " "item ")"])
(def-curried render-children ( *parent c i a)
  (if (undefined? c) null

      c.render (.render c *parent)

      (array? c) (.each c (render-children *parent))

      (string? c) (.append-child *parent.*node (.create-text-node document c))

      (number? c) (.append-child *parent.*node (.create-text-node document (+ "" c)))

      (function? c) (render-children *parent (c *parent) i a)

      (instance-of? Element c) (let ((node (.wrap Document-node c *parent.*node)))
                                 (set a i node)
                                 (render-children *parent  node i a))

      (.append-child *parent.*node c)))
(define Document-node Event-emitter
  (init (tag-name
         attributes
         (*children [])
         *parent

         (*node (document.create-element tag-name)))
        (.call Event-emitter.init this))


  (gett children this.*children)
  (gett style this.*node.style)

  (def-generic clear (*node)
    (assign *node.innerHTML "") this)

  (def-generic render (*parent attributes tag-name *node children)

    
    (assign *node.innerHTML "")
    
    (assign this.*parent *parent)

    (.append-child *parent.*node *node)

    (each attributes (a k) (set *node k a))

    (pipe children (.each  (render-children this)))
    (.emit this 'render )

    this)

  (def wrap (*node *parent)
    "create a Document-node from a native DOM Element"
    ((create Document-node) *node.tag-name {} [] *parent *node))

  (def-generic append (node children)
    "add a child to the bottom of this one"
    (.push children node)
    this)

  (def-generic prepend (node children)
    "add a child to the top of this one"
    (assign this.children [node children]))

  (def-generic remove (*node *parent)
    "remove this element from the tree."

    (.remove *node)

    (.filter *parent.children (=> (c) (not (= *node c))))
    (.emit *parent 'remove *node)
    this))
(define Document-root  Document-node
  (gett *parent this)
  (tag-name "html")
  (*node document.document-element)
  (*children []))
(define Document-body  Document-node
  (gett *parent this)
  (tag-name "body")
  (*node document.body)
  (*children []))
(define Document-head  Document-node
  (gett *parent this)
  (tag-name "head")
  (*node document.head)
  (*children [])
  )
(var create-document-node (create Document-node))
(print document.append-child)
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(include "../inc/misc.sibilant")
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(with-dom Document-body
          (.div .id "main"
                (.h1 "hi")))
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/inc/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/inc/")
(def Object.prototype.each (f)
     (pipe (Object.keys this)
           (.for-each (=> (k) (f (get this k) k)))
           )
     )
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(with-dom Document-body
          (.div .id "main"
                (.h1 "hi")))
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(with-dom Document-body
          (.div .id "main"
                (.canvas .id "ants")))
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(var a (.tensor1d dl [ 1 2 3 4 5])
     b (.scalar dl 5))
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(require! dl 'deeplearn)
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(var a (.tensor1d dl [ 1 2 3 4 5])
     b (.scalar dl 5))
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(.print a)
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(.print b)
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(.print (.add a b))
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(.print a )
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(set (get a 'data) 0 2)
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(.print a )
(meta (assign sibilant.dir  "./") null)
(print a)
(print a.data)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(.then (get a 'data)
       (aprint "what do we have"))
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(.then ((get a 'data))
       (aprint "what do we have"))
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(.then ((get a 'data))
       (=> (d) (set d 0 5)))
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(.print a )
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(include "kit/header"
         "kit-interface/header")
(import-namespace kit)
(import-namespace interface)
(include "../inc/misc.sibilant")
(include "kit-html/src/dom")
(import-namespace dom)
(require! dl 'deeplearn)
(with-dom Document-body
          (.div .id "main"
                (.canvas .id "ants")))
(var canvas (.get-element-by-id document "ants"))
(var dim [256 256])
(define Field Interface

  (init ( color (shape dim) (tensor (dl.zeros shape))))

  (def set ([x y] v) (then (this.tensor.data) d (set d (+ x y) v)))
  (def get ([x y] ) (then (this.tensor.data) d (get d (+ x y))))

  (def-generic render (canvas shape color tensor)
    (var ctx (.get-context canvas '2d)
         [height width] dim)

    (var image-data (new Image-data height width))

    (.tidy dl (-> (then (tensor.data) d
                        (for! (i 0) (< i (* width height)) (++ i)
                              (var j (* i 4)
                                   k i)
                              (var a (get d i))
                              (set image-data.data
                                   j (Math.round (* color.r a))
                                   (+ j 1)  (Math.round (* color.g a))
                                   (+ j 2) (Math.round (* color.b a))
                                   (+ j 3) (Math.round (* 255 a))))
                        (.put-image-data ctx))))))
(def rgb (r g b ) (lit  r g b ))
(var red (rgb 255 0 0 ))
(var ants ((create Field) red))
(.set ants [128 128] 1)
(.render ants)
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(var canvas (.get-element-by-id document "ants"))
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(var dim [256 256])
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(define Field Interface

  (init ( color (shape dim) (tensor (dl.zeros shape))))

  (def set ([x y] v) (then (this.tensor.data) d (set d (+ x y) v)))
  (def get ([x y] ) (then (this.tensor.data) d (get d (+ x y))))

  (def-generic render (canvas shape color tensor)
    (var ctx (.get-context canvas '2d)
         [height width] dim)

    (var image-data (new Image-data height width))

    (.tidy dl (-> (then (tensor.data) d
                        (for! (i 0) (< i (* width height)) (++ i)
                              (var j (* i 4)
                                   k i)
                              (var a (get d i))
                              (set image-data.data
                                   j (Math.round (* color.r a))
                                   (+ j 1)  (Math.round (* color.g a))
                                   (+ j 2) (Math.round (* color.b a))
                                   (+ j 3) (Math.round (* 255 a))))
                        (.put-image-data ctx))))))
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(def rgb (r g b ) (lit  r g b ))
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(var red (rgb 255 0 0 ))
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(var ants ((create Field) red))
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(.set ants [128 128] 1)
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(meta (assign sibilant.dir  "./") null)
(.render ants)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(.render ants canvas)
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(define Field Interface

  (init ( color (shape dim) (tensor (dl.zeros shape))))

  (def set ([x y] v) (then (this.tensor.data) d (set d (+ x y) v)))
  (def get ([x y] ) (then (this.tensor.data) d (get d (+ x y))))

  (def-generic render (canvas shape color tensor)
    (var ctx (.get-context canvas "2d")
         [height width] dim)

    (var image-data (new Image-data height width))

    (.tidy dl (-> (then (tensor.data) d
                        (for! (i 0) (< i (* width height)) (++ i)
                              (var j (* i 4)
                                   k i)
                              (var a (get d i))
                              (set image-data.data
                                   j (Math.round (* color.r a))
                                   (+ j 1)  (Math.round (* color.g a))
                                   (+ j 2) (Math.round (* color.b a))
                                   (+ j 3) (Math.round (* 255 a))))
                        (.put-image-data ctx))))))
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(.render ants canvas)
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(define Field Interface

  (init ( color (shape dim) (tensor (dl.zeros shape))))

  (def set ([x y] v) (then (this.tensor.data) d (set d (+ x y) v)))
  (def get ([x y] ) (then (this.tensor.data) d (get d (+ x y))))

  (def-generic render (canvas shape color tensor)
    (var ctx (.get-context canvas "2d")
         [height width] dim)

    (var image-data (new Image-data height width))

    (then (tensor.data) d
          (.tidy dl (->
                     (for! (i 0) (< i (* width height)) (++ i)
                           (var j (* i 4)
                                k i)
                           (var a (get d i))
                           (set image-data.data
                                j (Math.round (* color.r a))
                                (+ j 1)  (Math.round (* color.g a))
                                (+ j 2) (Math.round (* color.b a))
                                (+ j 3) (Math.round (* 255 a))))
                     (.put-image-data ctx image-data))))))
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(.set ants [128 128] 1)
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(.render ants canvas)
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(define Field Interface

  (init ( color (shape dim) (tensor (dl.zeros shape))))

  (def set ([x y] v) (then (this.tensor.data) d (set d (+ x y) v)))
  (def get ([x y] ) (then (this.tensor.data) d (get d (+ x y))))

  (def-generic render (canvas shape color tensor)
    (var ctx (.get-context canvas "2d")
         [height width] dim)

    (var image-data (new Image-data height width))

    (then (tensor.data) d
          (.tidy dl (->
                     (for! (i 0) (< i (* width height)) (++ i)
                           (var j (* i 4)
                                k i)
                           (var a (get d i))
                           (set image-data.data
                                j (Math.round (* color.r a))
                                (+ j 1)  (Math.round (* color.g a))
                                (+ j 2) (Math.round (* color.b a))
                                (+ j 3) (Math.round (* 255 a))))
                     (.put-image-data ctx image-data 0 0))))))
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(.render ants canvas)
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(.set ants [128 128] 0)
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(.render ants canvas)
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(.set ants [200 200] 1)
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(.render ants canvas)
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(.set ants [200 200] 0)
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(.render ants canvas)
(meta (assign sibilant.dir  "./") null)
(.set ants [128 128] 1)
(.set ants [129 129] 1)
(.set ants [129 128] 1)
(.set ants [128 128] 1)
(.render ants canvas)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(.set ants [128 129] 1)
(meta (assign sibilant.dir  "./") null)
(.render ants canvas)
(.set ants [128 128] 1)
(.set ants [129 129] 1)
(.set ants [129 128] 1)
(.set ants [128 129] 1)
(.render ants canvas)
(.set ants [128 128] 1)
(.set ants [129 129] 1)
(.set ants [129 128] 1)
(.set ants [128 129] 1)
(.render ants canvas)
(.set ants [129 128] 0)
(.set ants [128 129] 0)
(.set ants [129 128] 0)
(.set ants [128 129] 0)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(.set ants [129 128] 0)
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(.set ants [128 129] 0)
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(.render ants canvas)
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(.set ants [128 128] 1)
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(.set ants [129 129] 1)
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(.set ants [129 128] 1)
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(.set ants [128 129] 1)
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(.render ants canvas)
(meta (assign sibilant.dir  "./") null)
(.set ants [255 255] 1)
(.render ants canvas)
(.set ants [0 255] 1)
(.render ants canvas)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(define Field Interface

  (init ( color (shape dim) (tensor (dl.zeros shape))))

  (def set ([x y] v) (then (this.tensor.data) d (set d (+ x y) v)))
  (def get ([x y] ) (then (this.tensor.data) d (get d (+ x y))))

  (def-generic render (canvas shape color tensor)
    (var ctx (.get-context canvas "2d")
         [height width] shape)

    (var image-data (new Image-data height width))

    (then (tensor.data) d
          (.tidy dl (->
                     (for! (i 0) (< i (* width height)) (++ i)
                           (var j (* i 4)
                                k i)
                           (var a (get d i))
                           (set image-data.data
                                j (Math.round (* color.r a))
                                (+ j 1)  (Math.round (* color.g a))
                                (+ j 2) (Math.round (* color.b a))
                                (+ j 3) (Math.round (* 255 a))))
                     (.put-image-data ctx image-data 0 0))))))
(meta (assign sibilant.dir  "./") null)
(.render ants canvas)
(print ants)
(.set ants [0 0] 1)
(.render ants canvas)
(.set ants [255 0] 1)
(.render ants canvas)
(.set ants [128 128] 0)
(.set ants [128 128] 0)
(.set ants [129 129] 0)
(.set ants [129 128] 0)
(.set ants [128 129] 0)
(.set ants [255 0] 1)
(.render ants canvas)
(.set ants [255 255] 1)
(.render ants canvas)
(.set ants [128 128] 1)
(.render ants canvas)
(print ants.render)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(define Field Interface

  (init ( color (shape dim) (tensor (dl.zeros shape))))

  (def set ([x y] v) (then (this.tensor.data) d (set d (+ x y) v)))
  (def get ([x y] ) (then (this.tensor.data) d (get d (+ x y))))

  (def-generic render (canvas shape color tensor)
    (var ctx (.get-context canvas "2d")
         [height width] tensor.shape)

    (var image-data (new Image-data height width))

    (then (tensor.data) d
          (.tidy dl (->
                     (for! (i 0) (< i (* width height)) (++ i)
                           (var j (* i 4)
                                k i)
                           (var a (get d i))
                           (set image-data.data
                                j (Math.round (* color.r a))
                                (+ j 1)  (Math.round (* color.g a))
                                (+ j 2) (Math.round (* color.b a))
                                (+ j 3) (Math.round (* 255 a))))
                     (.put-image-data ctx image-data 0 0))))))
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(.render ants canvas)
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(var ants ((create Field) red))
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(.set ants [128 128] 1)
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(.render ants canvas)
(meta (assign sibilant.dir  "./") null)
(.set ants [256 128] 1)
(.render ants canvas)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(.set ants [256 256] 1)
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(.render ants canvas)
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(.set ants [0 0] 1)
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(.render ants canvas)
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(define Field Interface

  (init ( color (shape dim) (tensor (dl.ones shape))))

  (def set ([x y] v) (then (this.tensor.data) d (set d (+ x y) v)))
  (def get ([x y] ) (then (this.tensor.data) d (get d (+ x y))))

  (def-generic render (canvas shape color tensor)
    (var ctx (.get-context canvas "2d")
         [height width] tensor.shape)

    (var image-data (new Image-data height width))

    (then (tensor.data) d
          (.tidy dl (->
                     (for! (i 0) (< i (* width height)) (++ i)
                           (var j (* i 4)
                                k i)
                           (var a (get d i))
                           (set image-data.data
                                j (Math.round (* color.r a))
                                (+ j 1)  (Math.round (* color.g a))
                                (+ j 2) (Math.round (* color.b a))
                                (+ j 3) (Math.round (* 255 a))))
                     (.put-image-data ctx image-data 0 0))))))
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(var ants ((create Field) red))
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(.render ants canvas)
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(.set ants [128 128] 0)
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(.render ants canvas)
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(.set ants [65 65] 0)
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(.render ants canvas)
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(.set ants [0 65] 0)
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(.render ants canvas)
(meta (assign sibilant.dir  "./") null)
(.set ants [0 200] 0)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(.render ants canvas)
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(.set ants [200 0] 0)
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(.set ants [200 0] 0)
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(.render ants canvas)
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(.set ants [128 128] 0)
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(.render ants canvas)
(meta (assign sibilant.dir  "./") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(define Field Interface

  (init ( color (shape dim) (tensor (dl.ones shape))))

  (def set ([x y] v) (then (this.tensor.data) d (set d (+ x y) v)))
  (def get ([x y] ) (then (this.tensor.data) d (get d (+ x y))))

  (def-generic render (canvas shape color tensor)
    (var ctx (.get-context canvas "2d")
         [height width] tensor.shape)

    (var image-data (new Image-data height width))

    (then (tensor.data) d
          (for! (i 0) (< i (* width height)) (++ i)
                (var j (* i 4)
                     k i)
                (var a (get d i))
                (set image-data.data
                     j (Math.round (* color.r a))
                     (+ j 1)  (Math.round (* color.g a))
                     (+ j 2) (Math.round (* color.b a))
                     (+ j 3) (Math.round (* 255 a))))
          (.put-image-data ctx image-data 0 0))))
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(meta (assign sibilant.dir  "./") null)
(var ants ((create Field) red))
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(.render ants canvas)
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(.set ants [128 128] 0)
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(.render ants canvas)
(meta (assign sibilant.dir  "./") null)
(print ants.render)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(define Field Interface

  (init ( color (shape dim) (tensor (dl.ones shape))))

  (def set ([x y] v) (then (this.tensor.data) d (set d (+ x y) v)))
  (def get ([x y] ) (then (this.tensor.data) d (get d (+ x y))))

  (def-generic render (canvas shape color tensor)
    (var ctx (.get-context canvas "2d")
         [height width] tensor.shape)

    (then (tensor.data) d

          (var image-data (new Image-data height width)) 
          (print "rendering" height width)

          (for! (i 0) (< i (* width height)) (++ i)
                (var j (* i 4)
                     k i)
                (var a (get d i))
                (set image-data.data
                     j (Math.round (* color.r a))
                     (+ j 1)  (Math.round (* color.g a))
                     (+ j 2) (Math.round (* color.b a))
                     (+ j 3) (Math.round (* 255 a))))
          (.put-image-data ctx image-data 0 0))))
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(.set ants [128 128] 0)
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(.render ants canvas)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(.set ants [128 128] 0)
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(.render ants canvas)
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(define Field Interface

  (init ( color (shape dim) (tensor (dl.ones shape))))

  (def set ([x y] v) (then (this.tensor.data) d (set d (+ x y) v)))
  (def get ([x y] ) (then (this.tensor.data) d (get d (+ x y))))

  (def-generic render (canvas shape color tensor)
    (var ctx (.get-context canvas "2d")
         [height width] tensor.shape)

    (then (tensor.data) d

          (var image-data (new Image-data height width)) 
          (print "rendering" height width image-data)

          (for! (i 0) (< i (* width height)) (++ i)
                (var j (* i 4)
                     k i)
                (var a (get d i))
                (set image-data.data
                     j (Math.round (* color.r a))
                     (+ j 1)  (Math.round (* color.g a))
                     (+ j 2) (Math.round (* color.b a))
                     (+ j 3) (Math.round (* 255 a))))
          (.put-image-data ctx image-data 0 0))))
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(.render ants canvas)
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(define Field Interface

  (init ( color (shape dim) (tensor (dl.ones shape))))

  (def set ([x y] v) (then (this.tensor.data) d (set d (+ (* y (first this.shape))
                                                          x) v)))
  (def get ([x y] ) (then (this.tensor.data) d (get d (+ (* y (first this.shape))
                                                         x))))

  (def-generic render (canvas shape color tensor)
    (var ctx (.get-context canvas "2d")
         [height width] tensor.shape)

    (then (tensor.data) d

          (var image-data (new Image-data height width)) 
          (print "rendering" height width image-data)

          (for! (i 0) (< i (* width height)) (++ i)
                (var j (* i 4)
                     k i)
                (var a (get d i))
                (set image-data.data
                     j (Math.round (* color.r a))
                     (+ j 1)  (Math.round (* color.g a))
                     (+ j 2) (Math.round (* color.b a))
                     (+ j 3) (Math.round (* 255 a))))
          (.put-image-data ctx image-data 0 0))))
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(var ants ((create Field) red))
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(.set ants [128 128] 0)
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(.render ants canvas)
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(define Field Interface

  (init ( color (shape dim) (tensor (dl.zeros shape))))

  (def set ([x y] v) (then (this.tensor.data) d (set d (+ (* y (first this.shape))
                                                          x) v)))
  (def get ([x y] ) (then (this.tensor.data) d (get d (+ (* y (first this.shape))
                                                         x))))

  (def-generic render (canvas shape color tensor)
    (var ctx (.get-context canvas "2d")
         [height width] tensor.shape)

    (then (tensor.data) d

          (var image-data (new Image-data height width)) 
          (print "rendering" height width image-data)

          (for! (i 0) (< i (* width height)) (++ i)
                (var j (* i 4)
                     k i)
                (var a (get d i))
                (set image-data.data
                     j (Math.round (* color.r a))
                     (+ j 1)  (Math.round (* color.g a))
                     (+ j 2) (Math.round (* color.b a))
                     (+ j 3) (Math.round (* 255 a))))
          (.put-image-data ctx image-data 0 0))))
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(define Field Interface

  (init ( color (shape dim) (tensor (dl.zeros shape))))

  (def set ([x y] v) (then (this.tensor.data) d (set d (+ (* y (first this.shape))
                                                          x) v)))
  (def get ([x y] ) (then (this.tensor.data) d (get d (+ (* y (first this.shape))
                                                         x))))

  (def-generic render (canvas shape color tensor)
    (var ctx (.get-context canvas "2d")
         [height width] tensor.shape)

    (then (tensor.data) d

          (var image-data (new Image-data height width)) 
          (print "rendering" height width image-data)

          (for! (i 0) (< i (* width height)) (++ i)
                (var j (* i 4)
                     k i)
                (var a (get d i))
                (set image-data.data
                     j (Math.round (* color.r a))
                     (+ j 1)  (Math.round (* color.g a))
                     (+ j 2) (Math.round (* color.b a))
                     (+ j 3) (Math.round (* 255 a))))
          (.put-image-data ctx image-data 0 0))))
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(var ants ((create Field) red))
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(meta (assign sibilant.dir  "./") null)
(.set ants [128 128] 1)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(.render ants canvas)
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(define Field Interface

  (init ( color (shape dim) (tensor (dl.zeros shape))))

  (def set ([x y] v) (then (this.tensor.data) d (set d (+ (* y (first this.shape))
                                                          x) v)))
  (def get ([x y] ) (then (this.tensor.data) d (get d (+ (* y (first this.shape))
                                                         x))))

  (def-generic render (canvas shape color tensor)
    (if! (not running?) (return false))
    (var ctx (.get-context canvas "2d")
         [height width] tensor.shape)

    (then (tensor.data) d

          (var image-data (new Image-data height width)) 
          (print "rendering" height width image-data)

          (for! (i 0) (< i (* width height)) (++ i)
                (var j (* i 4)
                     k i)
                (var a (get d i))
                (set image-data.data
                     j (Math.round (* color.r a))
                     (+ j 1)  (Math.round (* color.g a))
                     (+ j 2) (Math.round (* color.b a))
                     (+ j 3) (Math.round (* 255 a))))
          (.put-image-data ctx image-data 0 0))))
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(print ants.render)
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(define Field Interface

  (init ( color (shape dim) (tensor (dl.zeros shape))))

  (def set ([x y] v) (then (this.tensor.data) d (set d (+ (* y (first this.shape))
                                                          x) v)))
  (def get ([x y] ) (then (this.tensor.data) d (get d (+ (* y (first this.shape))
                                                         x))))

  (def-generic render (canvas shape color tensor)
    (if! (not running?) (return false))
    (var ctx (.get-context canvas "2d")
         [height width] tensor.shape)

    (then (tensor.data) d

          (var image-data (new Image-data height width)) 
          (print "rendering" height width image-data)

          (for! (i 0) (< i (* width height)) (++ i)
                (var j (* i 4)
                     k i)
                (var a (get d i))
                (set image-data.data
                     j (Math.round (* color.r a))
                     (+ j 1)  (Math.round (* color.g a))
                     (+ j 2) (Math.round (* color.b a))
                     (+ j 3) (Math.round (* 255 a))))
          (.put-image-data ctx image-data 0 0)
          (.render this canvas))))
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(define Field Interface

  (init ( color (shape dim) (tensor (dl.zeros shape))))

  (def set ([x y] v) (then (this.tensor.data) d (set d (+ (* y (first this.shape))
                                                          x) v)))
  (def get ([x y] ) (then (this.tensor.data) d (get d (+ (* y (first this.shape))
                                                         x))))

  (def-generic render (canvas shape color tensor)
    (if! (not running?) (return false))
    (var ctx (.get-context canvas "2d")
         [height width] tensor.shape)

    (then (tensor.data) d

          (var image-data (new Image-data height width))

          (for! (i 0) (< i (* width height)) (++ i)
                (var j (* i 4)
                     k i)
                (var a (get d i))
                (set image-data.data
                     j (Math.round (* color.r a))
                     (+ j 1)  (Math.round (* color.g a))
                     (+ j 2) (Math.round (* color.b a))
                     (+ j 3) (Math.round (* 255 a))))
          (.put-image-data ctx image-data 0 0)
          (.render this canvas))))
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(define Field Interface

  (init ( color (shape dim) (tensor (dl.ones shape))))

  (def set ([x y] v) (then (this.tensor.data) d (set d (+ (* y (first this.shape))
                                                          x) v)))
  (def get ([x y] ) (then (this.tensor.data) d (get d (+ (* y (first this.shape))
                                                         x))))
  

  (def-generic render (canvas shape color tensor)
    (if! (not running?) (return false))
    (var ctx (.get-context canvas "2d")
         [height width] tensor.shape)

    (then (tensor.data) d

          (var image-data (new Image-data height width))

          (for! (i 0) (< i (* width height)) (++ i)
                (var j (* i 4)
                     k i)
                (var a (get d i))
                (set image-data.data
                     j (Math.round (* color.r a))
                     (+ j 1)  (Math.round (* color.g a))
                     (+ j 2) (Math.round (* color.b a))
                     (+ j 3) (Math.round (/  a 255))))
          (.put-image-data ctx image-data 0 0)
          )))
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(define ants ((create Field) red)
  (def-generic update ()

    (if! (not running?) (return false))
    (var filter (.random-uniform dl [3 3 1 1]))
    (.conv1d this.tensor filter 1 1))

  (def-generic render (canvas shape color tensor)
    (if! (not running?) (return false))
    (var ctx (.get-context canvas "2d")
         [height width] tensor.shape)

    (then (tensor.data) d

          (var image-data (new Image-data height width))

          (for! (i 0) (< i (* width height)) (++ i)
                (var j (* i 4)
                     k i)
                (var a (get d i))
                (set image-data.data
                     j (Math.round (* color.r a))
                     (+ j 1)  (Math.round (* color.g a))
                     (+ j 2) (Math.round (* color.b a))
                     (+ j 3) (Math.round (/  a 255))))
          (.put-image-data ctx image-data 0 0))))
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(.set ants [128 128] 0)
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(set-interval (-> (.update ants)
                  (.render ants canvas)
                  )
              0)
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(var running? true)
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(define ants ((create Field) red)
  (def-generic update ()

    (if! (not running?) (return false))
    (var filter (.random-uniform dl [3 3 1 ]))
    (.conv1d this.tensor filter 1 1))

  (def-generic render (canvas shape color tensor)
    (if! (not running?) (return false))
    (var ctx (.get-context canvas "2d")
         [height width] tensor.shape)

    (then (tensor.data) d

          (var image-data (new Image-data height width))

          (for! (i 0) (< i (* width height)) (++ i)
                (var j (* i 4)
                     k i)
                (var a (get d i))
                (set image-data.data
                     j (Math.round (* color.r a))
                     (+ j 1)  (Math.round (* color.g a))
                     (+ j 2) (Math.round (* color.b a))
                     (+ j 3) (Math.round (/  a 255))))
          (.put-image-data ctx image-data 0 0))))
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(define ants ((create Field) red)
  (def-generic update ()

    (if! (not running?) (return false))
    (var filter (.random-uniform dl [3 3 256 256 ]))
    (.conv2d this.tensor filter 1 1))

  (def-generic render (canvas shape color tensor)
    (if! (not running?) (return false))
    (var ctx (.get-context canvas "2d")
         [height width] tensor.shape)

    (then (tensor.data) d

          (var image-data (new Image-data height width))

          (for! (i 0) (< i (* width height)) (++ i)
                (var j (* i 4)
                     k i)
                (var a (get d i))
                (set image-data.data
                     j (Math.round (* color.r a))
                     (+ j 1)  (Math.round (* color.g a))
                     (+ j 2) (Math.round (* color.b a))
                     (+ j 3) (Math.round (/  a 255))))
          (.put-image-data ctx image-data 0 0))))
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(var dim [256 256 0 0 ])
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(meta (assign sibilant.dir  "./") null)
(def rgb (r g b ) (lit  r g b ))
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(var red (rgb 255 0 0 ))
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(var running? true)
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(define Field Interface

  (init ( color (shape dim) (tensor (dl.ones shape))))

  (def set ([x y] v) (then (this.tensor.data) d (set d (+ (* y (first this.shape))
                                                          x) v)))
  (def get ([x y] ) (then (this.tensor.data) d (get d (+ (* y (first this.shape))
                                                         x))))
  

  )
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(define ants ((create Field) red)
  (def-generic update ()

    (if! (not running?) (return false))
    (var filter (.random-uniform dl [3 3 256 256 ]))
    (.conv2d this.tensor filter 1 1))

  (def-generic render (canvas shape color tensor)
    (if! (not running?) (return false))
    (var ctx (.get-context canvas "2d")
         [height width] tensor.shape)

    (then (tensor.data) d

          (var image-data (new Image-data height width))

          (for! (i 0) (< i (* width height)) (++ i)
                (var j (* i 4)
                     k i)
                (var a (get d i))
                (set image-data.data
                     j (Math.round (* color.r a))
                     (+ j 1)  (Math.round (* color.g a))
                     (+ j 2) (Math.round (* color.b a))
                     (+ j 3) (Math.round (/  a 255))))
          (.put-image-data ctx image-data 0 0))))
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(define ants ((create Field) red)
  (def-generic update ()

    (if! (not running?) (return false))
    (print this.tensor.shape)
    (var filter (.random-uniform dl [3 3 256 256 ]))
    (.conv2d this.tensor filter 1 1))

  (def-generic render (canvas shape color tensor)
    (if! (not running?) (return false))
    (var ctx (.get-context canvas "2d")
         [height width] tensor.shape)

    (then (tensor.data) d

          (var image-data (new Image-data height width))

          (for! (i 0) (< i (* width height)) (++ i)
                (var j (* i 4)
                     k i)
                (var a (get d i))
                (set image-data.data
                     j (Math.round (* color.r a))
                     (+ j 1)  (Math.round (* color.g a))
                     (+ j 2) (Math.round (* color.b a))
                     (+ j 3) (Math.round (/  a 255))))
          (.put-image-data ctx image-data 0 0))))
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(var dim [256 256 0 0 ])
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(define ants ((create Field) red)
  (def-generic update ()

    (if! (not running?) (return false))
    (print this.tensor.shape)
    (var filter (.random-uniform dl [3 3 256 256 ]))
    (.conv2d this.tensor filter 1 1))

  (def-generic render (canvas shape color tensor)
    (if! (not running?) (return false))
    (var ctx (.get-context canvas "2d")
         [height width] tensor.shape)

    (then (tensor.data) d

          (var image-data (new Image-data height width))

          (for! (i 0) (< i (* width height)) (++ i)
                (var j (* i 4)
                     k i)
                (var a (get d i))
                (set image-data.data
                     j (Math.round (* color.r a))
                     (+ j 1)  (Math.round (* color.g a))
                     (+ j 2) (Math.round (* color.b a))
                     (+ j 3) (Math.round (/  a 255))))
          (.put-image-data ctx image-data 0 0))))
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(var running? false)
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(var ants ((create Field) red))
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(def-generic ants.update ()

  (if! (not running?) (return false))
  (print this.tensor.shape)
  (var filter (.random-uniform dl [3 3 256 256 ]))
  (.conv2d this.tensor filter 1 1))
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(def-generic ants.render (canvas shape color tensor)
  (if! (not running?) (return false))
  (var ctx (.get-context canvas "2d")
       [height width] tensor.shape)

  (then (tensor.data) d

        (var image-data (new Image-data height width))

        (for! (i 0) (< i (* width height)) (++ i)
              (var j (* i 4)
                   k i)
              (var a (get d i))
              (set image-data.data
                   j (Math.round (* color.r a))
                   (+ j 1)  (Math.round (* color.g a))
                   (+ j 2) (Math.round (* color.b a))
                   (+ j 3) (Math.round (/  a 255))))
        (.put-image-data ctx image-data 0 0)))
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(.set ants [128 128] 0)
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(set-interval (-> (.update ants)
                  (.render ants canvas)
                  )
              0)
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(var running? true)
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(var running? false)
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(var dim [256 256 256 256 ])
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(var ants ((create Field) red))
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(def-generic ants.update ()

  (if! (not running?) (return false))
  (print this.tensor.shape)
  (var filter (.random-uniform dl [3 3 256 256 ]))
  (.conv2d this.tensor filter 1 1))
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(def-generic ants.render (canvas shape color tensor)
  (if! (not running?) (return false))
  (var ctx (.get-context canvas "2d")
       [height width] tensor.shape)

  (then (tensor.data) d

        (var image-data (new Image-data height width))

        (for! (i 0) (< i (* width height)) (++ i)
              (var j (* i 4)
                   k i)
              (var a (get d i))
              (set image-data.data
                   j (Math.round (* color.r a))
                   (+ j 1)  (Math.round (* color.g a))
                   (+ j 2) (Math.round (* color.b a))
                   (+ j 3) (Math.round (/  a 255))))
        (.put-image-data ctx image-data 0 0)))
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(var running? true)
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(var running? false)
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(var dim [256 256 256 256 ])
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(var ants ((create Field) red))
(meta (assign sibilant.dir  "./") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(def-generic ants.update ()

  (if! (not running?) (return false))
  (print this.tensor.shape)
  (var filter (.random-uniform dl [3 3 256 256 ]))
  (.conv2d this.tensor filter 1 1))
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(def-generic ants.render (canvas shape color tensor)
  (if! (not running?) (return false))
  (var ctx (.get-context canvas "2d")
       [height width] tensor.shape)

  (then (tensor.data) d

        (var image-data (new Image-data height width))

        (for! (i 0) (< i (* width height)) (++ i)
              (var j (* i 4)
                   k i)
              (var a (get d i))
              (set image-data.data
                   j (Math.round (* color.r a))
                   (+ j 1)  (Math.round (* color.g a))
                   (+ j 2) (Math.round (* color.b a))
                   (+ j 3) (Math.round (/  a 255))))
        (.put-image-data ctx image-data 0 0)))
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(.set ants [128 128] 0)
(meta (assign sibilant.dir  "./") null)
(meta (assign sibilant.dir "/home/aaron/devel/apps/ants/src/") null)
(add-to-module-lookup"/home/aaron/devel/apps/ants/src/")
(var running? true)
(meta (assign sibilant.dir  "./") null)
